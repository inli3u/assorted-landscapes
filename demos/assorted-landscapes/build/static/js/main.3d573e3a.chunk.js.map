{"version":3,"sources":["libraries/ArrayUtil.js","libraries/Render.js","components/App.js","index.js"],"names":["mergesortBU","merge","quicksort","list","callback","Array","isArray","TypeError","slice","quicksortRange","low","high","p","pivot","i","j","swap","partition","length","firstIndex","secondIndex","temp","n","size","regenerator_default","a","wrap","_context","prev","next","delegateYield","Math","min","stop","_marked","mid","aux","k","_context2","copyArray","_marked2","ArrayUtil","resizeEnd","array","targetSize","concat","len","push","random","randomArray","resizeRandom","copy","randomIndex","round","splice","resizeMid","sortArray","algo","log","Object","toConsumableArray","makeBezierPath","ctx","row","px","x","py","y","beginPath","moveTo","nx","ny","c1x","c1y","c2x","c2y","bezierCurveTo","closePath","line","width","height","lineTo","rgba","r","g","b","Render","draw","sortLog","steps","scale","canvas","document","querySelector","offsetWidth","window","devicePixelRatio","offsetHeight","all","pathFunc","fillStyle","fillRect","strokeStyle","fill","lineWidth","stroke","drawFilledFlat","getContext","rows","canvasWidth","canvasHeight","rowHeight","map","rowIndex","stepX","rowOffsetY","value","v","pointOffsetY","pointsFromRows","max","result","sample","initialControls","algorithm","grainularity","initialArray","ArrayUtils","App","_useState","useState","_useState2","slicedToArray","controls","setControls","_useState3","_useState4","setArray","useEffect","react_default","createElement","className","htmlFor","id","onChange","e","objectSpread","target","type","ReactDOM","render","components_App","getElementById"],"mappings":"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","file":"static/js/main.3d573e3a.chunk.js","sourcesContent":["\n/**\n * Quicksort\n */\n\nfunction quicksort(list, callback) {\n  if (!Array.isArray(list)) throw new TypeError('First argument must be an array');\n  if (typeof callback !== 'function') throw new TypeError('Second argument must be a function');\n\n  callback(list.slice());\n  quicksortRange(list, 0, list.length - 1, callback);\n}\n\nfunction quicksortRange(list, low, high, callback) {\n  if (low >= high) return;\n\n  let p = partition(list, low, high, callback);\n  quicksortRange(list, low, p - 1, callback);\n  quicksortRange(list, p + 1, high, callback);\n}\n\nfunction partition(list, low, high, callback) {\n  // partition into list[low...j-1], list[j], list[j+1...high]\n  let pivot = list[low];\n  let i = low;\n  let j = high + 1;\n  while (true) {\n    do {\n      ++i;\n      if (i == high) break;\n    } while (list[i] < pivot);\n\n    do {\n      --j;\n      if (j == low) break;\n    } while (list[j] > pivot);\n\n    if (i >= j) {\n      break;\n    }\n\n    swap(list, i, j);\n    callback(list.slice());\n  }\n\n  swap(list, low, j);\n  callback(list.slice());\n  \n  return j;\n}\n\nfunction swap(list, firstIndex, secondIndex) {\n  let temp = list[firstIndex];\n  list[firstIndex] = list[secondIndex];\n  list[secondIndex] = temp;\n}\n\n\n/**\n * Mergesort\n */\n\nfunction *mergesortBU(list) {\n  let n = list.length;\n  for (let size = 1; size < n; size += size) {\n    for (let low = 0; low < n - size; low += size + size) {\n      yield* merge(list, low, low + size - 1, Math.min(low + size + size - 1, n - 1));\n    }\n  }\n}\n\nfunction *merge(list, low, mid, high) {\n  let i = low;\n  let j = mid + 1;\n  let aux = copyArray(list);\n\n  for (let k = low; k <= high; k++) {\n    if      (i > mid)         list[k] = aux[j++];\n    else if (j > high)        list[k] = aux[i++];\n    else if (aux[j] < aux[i]) list[k] = aux[j++];\n    else                      list[k] = aux[i++];\n\n    yield copyArray(list);\n  }\n}\n\n\n\n/*** Array functions ***/\n\nexport function copyArray(a) {\n  return a.slice();\n}\n\nexport function randomArray(len) {\n  let a = [];\n  for (let i = 0; i < len; i++) {\n    a.push(Math.random());\n  }\n  return a;\n}\n\nexport function resizeEnd(array, targetSize) {\n  if (targetSize < array.length) {\n    return array.slice(0, targetSize - 1);\n  }\n  \n  if (targetSize > array.length) {\n    return array.concat(randomArray(targetSize - array.length));\n  }\n\n  // No change\n  return copyArray(array);\n}\n\nexport function resizeRandom(array, targetSize) {\n  if (targetSize == array.length) return array;\n\n  let copy = copyArray(array);\n\n  while (targetSize < copy.length) {\n    let randomIndex = Math.round(Math.random() * (targetSize - 1));\n    copy.splice(randomIndex, 1);\n  }\n  \n  while (targetSize > copy.length) {\n    let randomIndex = Math.round(Math.random() * (targetSize - 1));\n    copy.splice(randomIndex, 0, Math.random());\n  }\n\n  return copy;\n}\n\nexport function resizeMid(array, targetSize) {\n  if (targetSize == array.length) return array;\n\n  let copy = copyArray(array);\n\n  while (targetSize < copy.length) {\n    let randomIndex = Math.round((targetSize - 1) / 2);\n    copy.splice(randomIndex, 1);\n  }\n  \n  while (targetSize > copy.length) {\n    let randomIndex = Math.round((targetSize - 1) / 2);\n    copy.splice(randomIndex, 0, Math.random());\n  }\n\n  return copy;\n}\n\nexport function sortArray(array, algo) {\n  let log = [];\n\n  if (algo === 'quicksort') {\n    // quicksort function reports original array first.\n    quicksort(copyArray(array), (list) => log.push(list));\n  } else {\n    log = [copyArray(array), ...mergesortBU(copyArray(array))];\n  }\n\n  return log;\n}\n\n/**\n * Given an array, return a new array containing at most max items evenly distributed across the original array\n*/\nexport function sample(array, max) {\n  if (max <= 0) return [];\n  if (max >= array.length) return array;\n\n  let result = [];\n  for (let n = 0; n < max - 1; n++) {\n    let i = Math.round(n / max * array.length);\n    result.push(array[i]);\n  }\n\n  // Always include last result.\n  result.push(array[array.length - 1]);\n\n  return result;\n}\n\nexport function isSorted(list) {\n  if (!Array.isArray(list)) throw new TypeError('First argument must be an array');\n\n  for (let i = 0; i < list.length - 1; i++) {\n    if (list[i] > list[i + 1]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n\n\nexport default {\n  resizeEnd,\n  resizeRandom,\n  resizeMid,\n  sortArray\n};","'use strict';\n\nimport {sample} from './ArrayUtil';\n\n\n/*** Drawing functions ***/\n\nfunction draw(sortLog, steps, scale) {\n  let canvas = document.querySelector('canvas');\n  canvas.width = canvas.offsetWidth * window.devicePixelRatio;\n  canvas.height = canvas.offsetHeight * window.devicePixelRatio;\n  let ctx = canvas.getContext('2d');\n\n  let lines = pointsFromRows(sample(sortLog, steps), scale, canvas.width, canvas.height);\n\n  //let distance = mouseX * 2 - window.innerWidth;\n  //let linesParallax = parallax(lines, distance, 1);\n  let linesParallax = lines; //parallaxPerspective(lines, distance, canvas.width);\n\n  drawFilledFlat(ctx, linesParallax, makeBezierPath);\n}\n\nfunction drawStroked(ctx, all, pathFunc) {\n  for (let i = 0; i < all.length; i++) {\n    let row = all[i];\n\n    pathFunc(ctx, row);\n\n    ctx.strokeStyle = 'rgba(0, 0, 0, 0.25)';\n    ctx.lineWidth = i / all.length * 4 + 2;\n    ctx.stroke();\n  }\n}\n\nfunction drawFilledDepth(ctx, all, pathFunc) {\n  let canvas = document.querySelector('canvas');\n  let c = 30;\n  ctx.fillStyle = rgba(c, c, c, 1);\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n  for (let i = 0; i < all.length; i++) {\n    let row = all[i];\n\n    pathFunc(ctx, row);\n    closePath(row, ctx, canvas.width, canvas.height);\n\n    let depth = i / all.length;\n    let color = ((depth) * 0.7 + 0.2) * 255; // values from 0.2 to 0.95, dark gray to off white\n    ctx.fillStyle = rgba(color, color, color, 1);\n    ctx.fill();\n  }\n}\n\nfunction drawFilledFlat(ctx, all, pathFunc) {\n  const colorBg = 230;\n  const colorFg = 255;\n  const canvas = document.querySelector('canvas');\n\n  ctx.fillStyle = rgba(colorBg, colorBg, colorBg, 1);\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n  ctx.fillStyle = rgba(colorFg, colorFg, colorFg, 1);\n  ctx.strokeStyle = 'rgba(0, 0, 0, 0.25)';\n\n  for (let i = 0; i < all.length; i++) {\n    let row = all[i];\n    pathFunc(ctx, row);\n    closePath(row, ctx, canvas.width, canvas.height);\n    ctx.fill();\n    ctx.lineWidth = i / all.length * 2 * window.devicePixelRatio + 2;\n    ctx.stroke();\n  }\n\n  // let color = 230;\n  // ctx.fillStyle = rgba(color, color, color, 1);\n  // ctx.fill();\n}\n\nfunction pointsFromRows(rows, scale, canvasWidth, canvasHeight) {\n  // 2 = 3 / 4\n  // 3 = 4 / 6\n  let rowHeight = (rows.length + 1) / (rows.length * 2) * canvasHeight;\n\n  return rows.map((row, rowIndex) => {\n    const stepX = canvasWidth / (row.length - 1);\n\n    // 2 = 1 / 4\n    // 3 = 1 / 6\n    let rowOffsetY = rowIndex / (rows.length * 2) * canvasHeight;\n\n    return row.map((value, i) => {\n      // 50%:  .25, .5, .75\n      // 100%: 0,   .5, 1\n      //let v = value * scale + value * ((1 - scale) / 2);\n      let v = (value - 0.5) * scale + 0.5;\n      let pointOffsetY = rowHeight * (1 - v);\n      //pointOffsetY = pointOffsetY * scale + pointOffsetY * (scale / 2);\n\n      return {\n        x: i * stepX,\n        y: pointOffsetY + rowOffsetY\n      };\n    });\n  });\n}\n\nfunction pointsFromRowsEven(rows, canvasWidth, canvasHeight) {\n  // Height of first rowOffsetY, doubled\n  // 2 = 3 / 4\n  // 3 = 4 / 6\n  let rowHeight = 1 / (rows.length + 1) * 4 * canvasHeight;\n  console.log(rowHeight);\n\n  return rows.map((row, rowIndex) => {\n    const stepX = canvasWidth / (row.length - 1);\n\n    // 2 = 1 / 3, 2 / 3\n    // 3 = 1 / 4, 2 / 4, 3 / 4\n    let rowOffsetY = (rowIndex + 1) / (rows.length + 1) * canvasHeight;\n    if (rowIndex == 0) console.log(rowOffsetY);\n\n    return row.map((value, i) => {\n      let pointOffsetY = rowHeight * (1 - value) - (rowHeight / 2);\n\n      return {\n        x: i * stepX,\n        y: rowOffsetY + pointOffsetY\n      };\n    });\n  });\n}\n\nfunction parallax(lines, distance, strength) {\n  return lines.map((line, lineI) => {\n    let s = lineI / (lines.length - 1) * strength;\n    return line.map((point) => {\n      return {\n        x: point.x + distance + distance * s,\n        y: point.y\n      }\n    });\n  });\n}\n\nfunction parallaxPerspective(lines, camerax, canvasWidth) {\n  return lines.map((line, lineI) => {\n    //let \n    let distance = 12 / ((lines.length - lineI) / 2 + 12) //* 0.02;\n    return line.map((point) => {\n      return {\n        x: (point.x - canvasWidth / 2 + camerax) * distance + canvasWidth / 2 ,\n        y: point.y\n      }\n    });\n  });\n}\n\nfunction makeBezierPath(ctx, row) {\n  let px = row[0].x;\n  let py = row[0].y;\n\n  ctx.beginPath();\n  ctx.moveTo(row[0].x, row[0].y);\n\n  for (let i = 1; i < row.length; i++) {\n    let nx = row[i].x;\n    let ny = row[i].y;\n    let c1x = (px + nx) / 2;\n    let c1y = py;\n    let c2x = (px + nx) / 2;\n    let c2y = ny;\n\n    ctx.bezierCurveTo(c1x, c1y, c2x, c2y, nx, ny);\n\n    px = nx;\n    py = ny;\n  }\n}\n\nfunction makeLinearPath(ctx, row) {\n  ctx.beginPath();\n  ctx.moveTo(row[0].x, row[0].y);\n\n  for (let i = 1; i < row.length; i++) {\n    ctx.lineTo(row[i].x, row[i].y);\n  }\n}\n\nfunction closePath(line, ctx, width, height) {\n  ctx.lineTo(line[line.length - 1].x, height);\n  ctx.lineTo(line[0].x, height);\n  ctx.closePath();\n}\n\nfunction rgba(r, g, b, a) {\n  return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + a + ')';\n}\n\n\n\nexport default {\n  draw\n};","import React, { useState, useEffect } from 'react';\nimport ArrayUtils from '../libraries/ArrayUtil';\nimport Render from '../libraries/Render';\nimport './App.css';\n\nconst initialControls = {\n  algorithm: 'quicksort',\n  grainularity: 20,\n  steps: 20,\n  scale: 50\n};\n\nconst initialArray = ArrayUtils.resizeMid([], initialControls.grainularity);\n\n\n\nfunction App() {\n  const [controls, setControls] = useState(initialControls);\n  const [array, setArray] = useState(initialArray);\n\n  useEffect(() => {\n    let sortLog = ArrayUtils.sortArray(array, controls.algorithm);\n    Render.draw(sortLog, controls.steps, controls.scale / 100);\n  });\n\n  function handleAlgorithmChange(e) {\n    setControls({...controls, algorithm: e.target.value});\n  }\n\n  function handleGrainularityChange(e) {\n    setControls({...controls, grainularity: e.target.value});\n    setArray(ArrayUtils.resizeMid(array, e.target.value));\n  }\n\n  function handleStepsChange(e) {\n    setControls({...controls, steps: e.target.value});\n  }\n\n  function handleScaleChange(e) {\n    setControls({...controls, scale: e.target.value});\n  }\n\n  return (\n      <div className=\"grid\">\n        <div className=\"controls\">\n\n          <h1>Assorted Landscapes</h1>\n\n          <div className=\"control select\">\n            <label htmlFor=\"algo\">Algorithm</label>\n            <select id=\"algo\" value={controls.algorithm} onChange={handleAlgorithmChange}>\n              <option value=\"quicksort\">Quicksort</option>\n              <option value=\"mergesort\">Mergesort (bottom-up)</option>\n            </select>\n          </div>\n\n          <div className=\"control knob\">\n            <label htmlFor=\"grainularity\">Grainularity</label>\n            <input type=\"range\" id=\"grainularity\" min=\"2\" max=\"50\" value={controls.grainularity} onChange={handleGrainularityChange} />\n          </div>\n\n          <div className=\"control knob\">\n            <label htmlFor=\"steps\">Steps</label>\n            <input type=\"range\" id=\"steps\" min=\"2\" max=\"50\" value={controls.steps} onChange={handleStepsChange} />\n          </div>\n\n          <div className=\"control knob\">\n              <label htmlFor=\"scale\">Scale</label>\n            <input type=\"range\" id=\"scale\" min=\"1\" max=\"100\" value={controls.scale} onChange={handleScaleChange} />\n          </div>\n\n          {/* <div className=\"control button\">\n            <button>Randomize Array</button>\n          </div>\n\n          <div className=\"control button\">\n            <button>Randomize Controls</button>\n          </div> */}\n\n        </div>\n\n        <canvas></canvas>\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}